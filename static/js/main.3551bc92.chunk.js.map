{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pageCount","useMemo","Math","ceil","pages","className","classNames","disabled","href","onClick","prevPage","map","pageNumber","active","handlePageChange","items","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","renderedItems","splice","handleSelectChange","useCallback","event","target","value","fromItem","replace","toItem","length","id","onChange","defaultValue","count","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"gMAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QAGI,IAFJC,mBAEI,MAFU,EAEV,EADJC,EACI,EADJA,aAEMC,EAAYC,mBAAQ,WACxB,OAAOC,KAAKC,KAAKP,EAAQC,KACxB,CAACD,EAAOC,IAELO,EAAQf,EAAW,EAAGW,GAkB5B,OACE,qBAAIK,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBT,IAFd,SAKE,mBACE,UAAQ,WACRO,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBV,EACfW,QA5BqB,WACP,IAAhBX,GACFC,GAAa,SAAAW,GAAQ,OAAIA,EAAW,MAqBlC,oBAWDN,EAAMO,KAAI,SAAAC,GAAU,OACnB,oBACEP,UAAWC,IACT,YACA,CAAEO,OAAQD,IAAed,IAH7B,SAOE,mBACE,UAAQ,WACRO,UAAU,YACVG,KAAI,WAAMI,GACVH,QAAS,kBAlCM,SAACG,GACxBb,EAAaa,GAiCUE,CAAiBF,IAJlC,SAMGA,KAREA,MAaT,oBAAIP,UAAWC,IACb,YACA,CAAEC,SAAUT,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBAAeV,IAAgBE,EAC/BS,QAzDoB,WACtBX,IAAgBE,GAClBD,GAAa,SAAAW,GAAQ,OAAIA,EAAW,MAkDlC,wBC5EFK,EAAQ1B,EAAW,EAAG,IACzBsB,KAAI,SAAAlB,GAAC,qBAAYA,MAEPuB,EAAgB,WAC3B,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOnB,EAAP,KAAoBsB,EAApB,KAEMC,EAAgB,YAAIN,GACvBO,QAAQxB,EAAc,GAAKoB,EAAcA,GAEtCK,EAAqBC,uBACzB,SAACC,GACCN,GAAiBM,EAAMC,OAAOC,OAC9BP,EAAe,KACd,IAGCQ,EAAWP,EAAc,GAAGQ,QAAQ,QAAS,IAC7CC,EAAST,EAAcA,EAAcU,OAAS,GAAGF,QAAQ,QAAS,IAExE,OACE,sBAAKxB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWP,EADX,mBACiC8B,EADjC,cAC+CE,EAD/C,eAC4Df,EAAMgB,OADlE,OAIA,sBAAK1B,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACR2B,GAAG,kBACH3B,UAAU,eACV4B,SAAUV,EACVW,aAAc,EALhB,SAOG,CAAC,EAAG,EAAG,GAAI,IAAIvB,KAAI,SAAAwB,GAAK,OACvB,wBAAQR,MAAOQ,EAAf,SACGA,GADwBA,UAOjC,uBAAOC,QAAQ,kBAAkB/B,UAAU,qBAA3C,+BAMF,cAAC,EAAD,CACET,MAAOmB,EAAMgB,OACblC,QAASqB,EACTpB,YAAaA,EACbC,aAAcqB,IAGhB,6BACGC,EAAcV,KAAI,SAAA0B,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC9DlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3551bc92.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { useMemo } from 'react';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage?: number;\n  onPageChange: (pageNum: number | ((prevPage: number) => number)) => void;\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const pageCount = useMemo(() => {\n    return Math.ceil(total / perPage);\n  }, [total, perPage]);\n\n  const pages = getNumbers(1, pageCount);\n\n  const handleBackwardButton = () => {\n    if (currentPage !== 1) {\n      onPageChange(prevPage => prevPage - 1);\n    }\n  };\n\n  const handleForwardButton = () => {\n    if (currentPage !== pageCount) {\n      onPageChange(prevPage => prevPage + 1);\n    }\n  };\n\n  const handlePageChange = (pageNumber: number) => {\n    onPageChange(pageNumber);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames(\n        'page-item',\n        { disabled: currentPage === 1 },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={handleBackwardButton}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(pageNumber => (\n        <li\n          className={classNames(\n            'page-item',\n            { active: pageNumber === currentPage },\n          )}\n          key={pageNumber}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${pageNumber}`}\n            onClick={() => handlePageChange(pageNumber)}\n          >\n            {pageNumber}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames(\n        'page-item',\n        { disabled: currentPage === pageCount },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === pageCount}\n          onClick={handleForwardButton}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const renderedItems = [...items]\n    .splice((currentPage - 1) * itemsPerPage, itemsPerPage);\n\n  const handleSelectChange = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setItemsPerPage(+event.target.value);\n      setCurrentPage(1);\n    }, [],\n  );\n\n  const fromItem = renderedItems[0].replace('Item ', '');\n  const toItem = renderedItems[renderedItems.length - 1].replace('Item ', '');\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${fromItem} - ${toItem} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handleSelectChange}\n            defaultValue={5}\n          >\n            {[3, 5, 10, 20].map(count => (\n              <option value={count} key={count}>\n                {count}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <Pagination\n        total={items.length} // total number of items to paginate\n        perPage={itemsPerPage} // number of items per page\n        currentPage={currentPage} /* optional with 1 by default */\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {renderedItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}